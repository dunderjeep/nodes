<dom-module id="graph-view">

  <template>
    <style></style>
    Graph main
  </template>
  <script>
    Polymer({
      is: 'graph-view',
      properties: {
        node: Object,
        // Used to show when one of the child elements has focus. Causes
        // paper-material to elevate
        active: {
          type: Boolean,
          value: false,
          reflectToAttribute: true
        }
      },
      attached: function() {
        // Delegate focus events with useCapture to figure out if one of our
        // child elements is being focused or if we're about to blur
        // All of this fanciness is for the sake of the raised paper effect
        this.addEventListener('focus', this._activate.bind(this), true);
        this.addEventListener('blur', this._deactivate.bind(this), true);
        this.addEventListener('mouseenter', this._activate.bind(this));
        this.addEventListener('mouseleave', this._deactivate.bind(this));
      },
      detached: function() {
        this.removeEventListener('focus', this._activate.bind(this), true);
        this.removeEventListener('blur', this._deactivate.bind(this), true);
        this.removeEventListener('mouseenter', this._activate.bind(this));
        this.removeEventListener('mouseleave', this._deactivate.bind(this));
      },
      _activate: function() {
        this.active = true;
      },
      _deactivate: function() {
        this.active = false;
      },
      _computeElevation: function(active) {
        return active ? 2 : 0;
      },
      _computeLabelId: function(uid) {
        return 'nodeItemLabel-' + uid;
      },
      // If enter was pressed, unfocus the text input
      _checkConfirmation: function(e) {
        if (e.keyCode === 13) {
          e.preventDefault();
          e.target.blur();
        }
      },
      _onDelete: function() {
        this.fire('delete-node', {node: this.node});
      }
    });
  </script>
</dom-module>
